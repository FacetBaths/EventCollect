import { Notify } from 'quasar';

export interface LeadCopyData {
  _id?: string;
  fullName: string;
  email: string;
  phone: string;
  address: {
    street: string;
    city: string;
    state: string;
    zipCode: string;
  };
  servicesOfInterest: string[];
  tempRating?: number;
  notes?: string;
  wantsAppointment?: boolean;
  appointmentDetails?: {
    preferredDate?: string;
    preferredTime?: string;
    notes?: string;
  };
  eventName?: string;
  createdAt?: string;
  syncStatus?: string;
  leapCustomerId?: string;
  leapJobId?: string;
  leapProspectId?: string;
}

export function useCopyLead() {
  function formatLeadForCopy(lead: LeadCopyData): string {
    const sections = [];

    // Header
    sections.push('üìã LEAD INFORMATION');
    sections.push('‚ïê'.repeat(50));

    // Basic Info
    sections.push('üë§ CUSTOMER DETAILS:');
    sections.push(`Name: ${lead.fullName}`);
    sections.push(`Email: ${lead.email}`);
    sections.push(`Phone: ${lead.phone}`);
    sections.push('');

    // Address
    if (lead.address.street || lead.address.city || lead.address.state || lead.address.zipCode) {
      sections.push('üìç ADDRESS:');
      if (lead.address.street) sections.push(`Street: ${lead.address.street}`);
      if (lead.address.city) sections.push(`City: ${lead.address.city}`);
      if (lead.address.state) sections.push(`State: ${lead.address.state}`);
      if (lead.address.zipCode) sections.push(`Zip: ${lead.address.zipCode}`);
      sections.push('');
    }

    // Services
    if (lead.servicesOfInterest && lead.servicesOfInterest.length > 0) {
      sections.push('üîß SERVICES OF INTEREST:');
      lead.servicesOfInterest.forEach(service => {
        sections.push(`‚Ä¢ ${service}`);
      });
      sections.push('');
    }

    // Temperature Rating
    if (lead.tempRating) {
      const tempLabel = lead.tempRating >= 8 ? 'Hot üî•' : 
                       lead.tempRating >= 4 ? 'Warm üå°Ô∏è' : 'Cold ‚ùÑÔ∏è';
      sections.push(`üå°Ô∏è PROSPECT TEMPERATURE: ${lead.tempRating}/10 (${tempLabel})`);
      sections.push('');
    }

    // Appointment Information
    if (lead.wantsAppointment) {
      sections.push('üìÖ APPOINTMENT REQUEST:');
      sections.push('Customer wants an appointment: YES');
      
      if (lead.appointmentDetails?.preferredDate && lead.appointmentDetails?.preferredTime) {
        const date = new Date(lead.appointmentDetails.preferredDate);
        const formattedDate = date.toLocaleDateString('en-US', {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        sections.push(`Preferred Date: ${formattedDate}`);
        sections.push(`Preferred Time: ${lead.appointmentDetails.preferredTime}`);
        
        if (lead.appointmentDetails.notes) {
          sections.push(`Appointment Notes: ${lead.appointmentDetails.notes}`);
        }
      } else {
        sections.push('‚ö†Ô∏è Appointment requested but no specific preference set');
      }
      sections.push('');
    }

    // Notes
    if (lead.notes) {
      sections.push('üìù NOTES:');
      sections.push(lead.notes);
      sections.push('');
    }

    // Event Information
    if (lead.eventName) {
      sections.push(`üé™ EVENT: ${lead.eventName}`);
      sections.push('');
    }

    // System Information
    sections.push('‚öôÔ∏è SYSTEM INFO:');
    if (lead._id) sections.push(`Lead ID: ${lead._id}`);
    if (lead.createdAt) {
      const createdDate = new Date(lead.createdAt);
      sections.push(`Created: ${createdDate.toLocaleString('en-US')}`);
    }
    if (lead.syncStatus) {
      const statusEmoji = lead.syncStatus === 'synced' ? '‚úÖ' : 
                         lead.syncStatus === 'error' ? '‚ùå' : '‚è≥';
      sections.push(`LEAP Sync Status: ${statusEmoji} ${lead.syncStatus.toUpperCase()}`);
    }
    if (lead.leapCustomerId) sections.push(`LEAP Customer ID: ${lead.leapCustomerId}`);
    if (lead.leapJobId) sections.push(`LEAP Job ID: ${lead.leapJobId}`);
    if (lead.leapProspectId) sections.push(`LEAP Prospect ID: ${lead.leapProspectId}`);

    // Footer
    sections.push('');
    sections.push('‚ïê'.repeat(50));
    sections.push(`Generated by EventCollect on ${new Date().toLocaleString('en-US')}`);

    return sections.join('\n');
  }

  async function copyLeadToClipboard(lead: LeadCopyData): Promise<boolean> {
    try {
      const formattedLead = formatLeadForCopy(lead);
      
      // Use the Clipboard API if available
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(formattedLead);
      } else {
        // Fallback for older browsers or non-secure contexts
        const textArea = document.createElement('textarea');
        textArea.value = formattedLead;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        const successful = document.execCommand('copy');
        document.body.removeChild(textArea);
        
        if (!successful) {
          throw new Error('Failed to copy using fallback method');
        }
      }

      Notify.create({
        type: 'positive',
        message: 'Lead information copied to clipboard!',
        timeout: 3000,
        position: 'top',
        icon: 'content_copy'
      });

      return true;
    } catch (error) {
      console.error('Failed to copy lead information:', error);
      
      Notify.create({
        type: 'negative',
        message: 'Failed to copy lead information to clipboard',
        timeout: 3000,
        position: 'top',
        icon: 'error'
      });

      return false;
    }
  }

  return {
    copyLeadToClipboard,
    formatLeadForCopy
  };
}
